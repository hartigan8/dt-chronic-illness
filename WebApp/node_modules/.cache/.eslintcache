[{"/Users/can/Documents/dt-bitirme/WebApp/src/index.js":"1","/Users/can/Documents/dt-bitirme/WebApp/src/App.js":"2","/Users/can/Documents/dt-bitirme/WebApp/src/Components.js":"3","/Users/can/Documents/dt-bitirme/WebApp/src/SuccessPage.js":"4","/Users/can/Documents/dt-bitirme/WebApp/src/Forms.js":"5"},{"size":255,"mtime":1699113415371,"results":"6","hashOfConfig":"7"},{"size":527,"mtime":1699216184622,"results":"8","hashOfConfig":"7"},{"size":3497,"mtime":1699113415371,"results":"9","hashOfConfig":"7"},{"size":178,"mtime":1699215121128,"results":"10","hashOfConfig":"7"},{"size":6730,"mtime":1699219436065,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"blflx4",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"15"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"/Users/can/Documents/dt-bitirme/WebApp/src/index.js",[],[],[],"/Users/can/Documents/dt-bitirme/WebApp/src/App.js",["30"],[],"import React from \"react\";\nimport * as Components from './Components';\nimport SuccessPage from './SuccessPage';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport Forms from './Forms';\n\n function App() {\n    \n\n    return (\n        <Router>\n            <Routes>\n                <Route path=\"/success\" element={<SuccessPage />} />\n                <Route path=\"/\" element={<Forms />} /> {/* Use the Forms component here */}\n            </Routes>\n        </Router>\n    );\n}\n    \n\n export default App;","/Users/can/Documents/dt-bitirme/WebApp/src/Components.js",[],[],"/Users/can/Documents/dt-bitirme/WebApp/src/SuccessPage.js",[],[],"/Users/can/Documents/dt-bitirme/WebApp/src/Forms.js",["31","32"],[],"import React from \"react\";\nimport * as Components from './Components';\nimport { useNavigate } from \"react-router-dom\";\nfunction Forms() {\n    const isValidEmail = (email) => /\\S+@\\S+\\.\\S+/.test(email);\n    const isValidPassword = (password) => password.length >= 6;\n    const [login, toggle] = React.useState(true);\n    const [loginMail, setLoginMail] = React.useState('');\n    const [loginPassword, setLoginPassword] = React.useState('');\n    const [registerMail, setRegisterMail] = React.useState('');\n    const [registerPassword, setRegisterPassword] = React.useState('');\n    const [registerName, setRegisterName] = React.useState('');\n    let navigate = useNavigate();\n    const handleRegisterName = (value) =>{\n        setRegisterName(value)\n    }\n    const handleLoginEmail = (value) =>{\n        setLoginMail(value)\n    }\n    const handleLoginPassword = (value) =>{\n        setLoginPassword(value)\n    }\n    const handleRegisterEmail = (value) =>{\n        setRegisterMail(value)\n    }\n    const handleRegisterPassword = (value) =>{\n        setRegisterPassword(value)\n    }\n    const handleRegisterSubmit = async (event) => {\n        event.preventDefault(); // Prevent the form from submitting naturally\n        /*\n        if (!isValidEmail(registerMail) || !isValidPassword(registerPassword)) {\n            console.error('Invalid email or password');\n            return;\n        }\n        */\n        try {\n            const response = await fetch('http://localhost:8080/auth/register', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    name: registerName,\n                    email: registerMail,\n                    password: registerPassword,\n                }),\n            });\n    \n            const data = await response.json();\n            if (response.ok) {\n                // Save the tokens. You might want to save them in localStorage or in a state management library\n                localStorage.setItem('access_token', data.access_token);\n                localStorage.setItem('refresh_token', data.refresh_token);\n                navigate('/success');\n                // Redirect the user or perform other actions like updating the UI\n            } else {\n                // Handle errors - data might include error message\n                console.error(data.message);\n            }\n        } catch (error) {\n            console.error('Error during registration:', error);\n        }\n    };\n    \n    const handleLoginSubmit = async (event) => {\n        event.preventDefault(); // Prevent the form from submitting naturally\n        /*\n        if (!isValidEmail(registerMail) || !isValidPassword(registerPassword)) {\n            console.error('Invalid email or password');\n            return;\n        }\n        */\n        try {\n            const response = await fetch('http://localhost:8080/auth/login', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    email: loginMail,\n                    password: loginPassword,\n                }),\n            });\n            \n            const data = await response.json();\n            if (response.ok) {\n                // Save the tokens. You might want to save them in localStorage or in a state management library\n                localStorage.setItem('access_token', data.access_token);\n                localStorage.setItem('refresh_token', data.refresh_token);\n                // Redirect the user or perform other actions like updating the UI\n                navigate('/success');\n            } else {\n                // Handle errors - data might include error message\n                console.error(data.message);\n            }\n        } catch (error) {\n            console.error('Error during login:', error);\n        }\n    };\n\n    return (\n    <Components.Container>\n        <Components.SignUpContainer signinIn={login}>\n            <Components.Form onSubmit={handleRegisterSubmit}>\n                <Components.Title>Create Account</Components.Title>\n                <Components.Input type='text' placeholder='Name' onChange={(e) => handleRegisterName(e.target.value)} />\n                <Components.Input type='email' placeholder='Email' onChange={(e) => handleRegisterEmail(e.target.value)} />\n                <Components.Input type='password' placeholder='Password' onChange={(e) => handleRegisterPassword(e.target.value)} />\n                <Components.Button type=\"submit\">Sign Up</Components.Button>\n            </Components.Form>\n        </Components.SignUpContainer>\n\n        <Components.SignInContainer signinIn={login}>\n            <Components.Form onSubmit={handleLoginSubmit}>\n                <Components.Title>Sign in</Components.Title>\n                <Components.Input type='email' placeholder='Email' onChange={(e) => handleLoginEmail(e.target.value)} />\n                <Components.Input type='password' placeholder='Password' onChange={(e) => handleLoginPassword(e.target.value)} />\n                <Components.Anchor href='#'>Forgot your password?</Components.Anchor>\n                <Components.Button type=\"submit\">Sign In</Components.Button>\n            </Components.Form>\n        </Components.SignInContainer>\n\n        <Components.OverlayContainer signinIn={login}>\n                  <Components.Overlay signinIn={login}>\n\n                  <Components.LeftOverlayPanel signinIn={login}>\n                      <Components.Title>Welcome Back!</Components.Title>\n                      <Components.Paragraph>\n                          To keep connected with us please login with your personal info\n                      </Components.Paragraph>\n                      <Components.GhostButton onClick={() => toggle(true)}>\n                          Sign In\n                      </Components.GhostButton>\n                      </Components.LeftOverlayPanel>\n\n                      <Components.RightOverlayPanel signinIn={login}>\n                        <Components.Title>Hello, Friend!</Components.Title>\n                        <Components.Paragraph>\n                            Enter Your personal details and start journey with us\n                        </Components.Paragraph>\n                            <Components.GhostButton onClick={() => toggle(false)}>\n                                Sigin Up\n                            </Components.GhostButton> \n                      </Components.RightOverlayPanel>\n  \n                  </Components.Overlay>\n              </Components.OverlayContainer>\n    </Components.Container>\n);\n}\nexport default Forms;",{"ruleId":"33","severity":1,"message":"34","line":2,"column":13,"nodeType":"35","messageId":"36","endLine":2,"endColumn":23},{"ruleId":"33","severity":1,"message":"37","line":5,"column":11,"nodeType":"35","messageId":"36","endLine":5,"endColumn":23},{"ruleId":"33","severity":1,"message":"38","line":6,"column":11,"nodeType":"35","messageId":"36","endLine":6,"endColumn":26},"no-unused-vars","'Components' is defined but never used.","Identifier","unusedVar","'isValidEmail' is assigned a value but never used.","'isValidPassword' is assigned a value but never used."]